openapi: 3.0.3
info:
  title: WASAPhoto
  version: 0.0.1
servers: 
  - url: http://localhost:3000
paths: 
  /accounts/{userId}/edit:
    parameters:
    - { $ref: "#/components/parameters/userId" }
    put:
      operationId: setMyUserName
      summary: Updates user account by providing a new username.
      description: Allows the user specified by userId to update its user account. The content returned if successful is a username.
      tags: [user settings]
      requestBody: 
        content: 
          application/json:       
            schema: {$ref: '#/components/schemas/Username'}
        required: true
      responses:
        '200':
          description: Username changed successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }  
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        
  /users/{username}/profile:
    parameters:
    - $ref: '#/components/parameters/username'
    get: 
      operationId: getUserProfile
      summary: Gets profile of user. 
      description: Allows a user to get the profile of the user specified by username.
      tags: [profile]
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Profile" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" } 
 
  /users/{username}/photos/:
    parameters:
    - $ref: '#/components/parameters/username'
    - $ref: '#/components/parameters/page'
    - $ref: '#/components/parameters/limit'
    get: 
      operationId: getPhotos
      summary: Get the photos uploaded by the user. 
      description: Allows the user to get photos of the user specified by username.
      tags: [photos]
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Photos" } 
          headers:
            Pagination-Count: 
              description: Total number of items
              schema:
                type: integer
            Pagination-Page: 
              description: Current page number
              schema:
                type: integer
            Pagination-Limit: 
              description: Number of returned items
              schema:
                type: integer
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    post: 
      operationId: uploadPhoto
      summary: Post a photo of the user and so add it to their stream of photos.
      description: Allows a user specified by username to add a photo to their photos collection. 
      tags: [photos]
      requestBody: 
        content:
          multipart/form-data:
            schema: { $ref: "#/components/schemas/Image" }
        required: true
      responses:
        '201':
          description: Photo uploaded successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Photo" } 
          links:
            GetImageByPhotoId:  
              operationId: getRawImage
              parameters:
                imageId: '$response.body#/PhotoId'
              description: >
                The `PhotoId` value returned in the response can be used as
                the `photoId` parameter in `GET /images/{photoId}`.
            GetPhotoByPhotoId:  
              operationId: getPhoto
              parameters:
                photoId: '$response.body#/PhotoId'
              description: >
                The `PhotoId` value returned in the response can be used as
                the `photoId` parameter in `GET /users/{username}/photos/{photoId}`.
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /images/{photoId}:
    parameters:
    - $ref: '#/components/parameters/photoId'
    get:
      operationId: getRawImage
      summary: Get the raw image.
      description: Allows a user to get the image contained in a photo resource.
      tags: [photos]
      responses: 
        '200':
          description: Successful operation.
          content:
            image/jpeg: 
              schema: { $ref: "#/components/schemas/Image" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /users/{username}/stream:
    parameters:
      - $ref: '#/components/parameters/username'
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/limit'
    get: 
      operationId: getMyStream
      summary: Get the photos of the followed users.
      description: Allows a user specified by username to get their stream which is a collection of photos of different users. 
      tags: [stream]
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Photos" }
          headers:
            Pagination-Count: 
              description: Total number of items
              schema:
                type: integer
            Pagination-Page: 
              description: Current page number
              schema:
                type: integer
            Pagination-Limit: 
              description: Number of returned items
              schema:
                type: integer
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
            
  /users/{username}/photos/{photoId}:
    parameters:
    - $ref: '#/components/parameters/username'
    - $ref: '#/components/parameters/photoId'
    delete: 
      operationId: deletePhoto
      summary: Delete a photo of the user and so remove it from their stream of photos.
      description: Allows the user to delete the photo specified by photoID of the user specified by username.
      tags: [photos]
      responses:
        '204':  {description: Photo deleted successfully. }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    get: 
      operationId: getPhoto
      summary: Get the photo with the specified ID. 
      description: Allows the user to get photo of the user specified by username.
      tags: [photos]
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Photo" } 
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        
  /users/{username}/photos/{photoId}/comments/:
    parameters:
    - $ref: '#/components/parameters/username'
    - $ref: '#/components/parameters/photoId'
    - $ref: '#/components/parameters/page'
    - $ref: '#/components/parameters/limit'
    get: 
      operationId: getCommentPhoto
      summary: Get comments of a photo of a user specified by username.
      description: A user can get the comments of a photo specified by photoId from the photos of the user specified by username. 
      tags: [comments]
      responses: 
        "200":
          description: Successfull operation.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Comments" }
          headers:
            Pagination-Count: 
              description: Total number of items
              schema:
                type: integer
            Pagination-Page: 
              description: Current page number
              schema:
                type: integer
            Pagination-Limit: 
              description: Number of returned items
              schema:
                type: integer
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }  
    post: 
      operationId: commentPhoto
      summary: Post a comment on a photo of a user specified by username.
      description: A user can post a comment on a photo specified by photoId. 
      tags: [comments]
      requestBody: 
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Comment" }
        required: true
      responses: 
        "201":
          description: Comment created successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Comment" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        
  /users/{username}/photos/{photoId}/comments/{commentId}:
    parameters:
    - $ref: '#/components/parameters/username'
    - $ref: '#/components/parameters/photoId'
    - $ref: '#/components/parameters/commentId'
    delete:
      operationId: uncommentPhoto
      summary: Remove a comment.
      description: The user can delete a comment specified by commentId.
      tags: [comments]
      responses:
        "204": { description: Comment deleted successfully. }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /users/{username}/photos/{photoId}/likes:
    parameters:
    - $ref: '#/components/parameters/username'
    - $ref: '#/components/parameters/photoId'
    - $ref: '#/components/parameters/page'
    - $ref: '#/components/parameters/limit'
    get: 
      operationId: getLikes
      summary: Get likes of a photo.
      description: A user can get the likes on a photo specified by photoId of a user username.
      tags: [likes]
      responses: 
        "200":
          description: Successful operation.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Likes" }
          headers:
            Pagination-Count: 
              description: Total number of items
              schema:
                type: integer
            Pagination-Page: 
              description: Current page number
              schema:
                type: integer
            Pagination-Limit: 
              description: Number of returned items
              schema:
                type: integer
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" } 
        
  /users/{username}/photos/{photoId}/likes/{userId}:
    parameters:
    - $ref: '#/components/parameters/username'
    - $ref: '#/components/parameters/photoId'
    - $ref: '#/components/parameters/userId'
    put: 
      operationId: likePhoto
      summary: Put a like on a photo.
      description: The user specified by userId can put a like on a photo specified by photoId.
      tags: [likes]
      responses: 
        "200": {description: Like put successfully. }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      operationId: unlikePhoto
      summary: Remove a like.
      description: The user specified by userId can remove a like on a photo specified by photoId.
      tags: [likes]
      responses:
        "204": { description: Like removed successfully. }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /users/{username}/followers/:
    parameters:
    - $ref: '#/components/parameters/username'
    - $ref: '#/components/parameters/page'
    - $ref: '#/components/parameters/limit'
    get: 
      operationId: getFollowers
      summary: Get followers of a user specified by username.
      description: A user can get the followers of the user specified by username. 
      tags: [followers]
      responses: 
        "200":
          description: Successful operation.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Followers" }
          headers:
            Pagination-Count: 
              description: Total number of items
              schema:
                type: integer
            Pagination-Page: 
              description: Current page number
              schema:
                type: integer
            Pagination-Limit: 
              description: Number of returned items
              schema:
                type: integer
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }  

  /users/{username}/followings/:
    parameters:
    - $ref: '#/components/parameters/username'
    - $ref: '#/components/parameters/page'
    - $ref: '#/components/parameters/limit'
    get: 
      operationId: getFollowings
      summary: Get followings of a user specified by username.
      description: A user can get the users they are followed by the user specified by username. 
      tags: [followings]
      responses: 
        "200":
          description: Successful operation.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Followings" }
          headers:
            Pagination-Count: 
              description: Total number of items
              schema:
                type: integer
            Pagination-Page: 
              description: Current page number
              schema:
                type: integer
            Pagination-Limit: 
              description: Number of returned items
              schema:
                type: integer
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }  

  /users/{username}/followings/{followingname}:
    parameters:
    - $ref: '#/components/parameters/username'
    - $ref: '#/components/parameters/followingname'
    put:
      operationId: followUser
      summary: Folllow a user.
      description: The user specified by username can follow a user specified by following name.
      tags: [followings]
      responses: 
        "200": {description: User followed successfully.}
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      operationId: unfollowUser
      summary: Unfollow a user.
      description: The user specified by username can unfollow a user specified by following name.
      tags: [followings]
      responses:
        "204": {description: User unfollowed successfully.}
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /users/{username}/bans/:
    parameters:
    - $ref: '#/components/parameters/username'
    - $ref: '#/components/parameters/page'
    - $ref: '#/components/parameters/limit'
    get:
      operationId: getBans
      summary: Get all users banned by the user username.
      description: The user specified by username can get all the bans they have put. 
      tags: [bans]
      responses: 
        "200":
          description: Successful operation.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Bans" }
          headers:
            Pagination-Count: 
              description: Total number of items
              schema:
                type: integer
            Pagination-Page: 
              description: Current page number
              schema:
                type: integer
            Pagination-Limit: 
              description: Number of returned items
              schema:
                type: integer
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" } 

  /users/{username}/bans/{bannedname}:
    parameters:
    - $ref: '#/components/parameters/username'
    - $ref: '#/components/parameters/bannedname'
    put:
      operationId: banUser
      summary: Ban a user specified by banId.
      description: The user specified by username can put a ban on the user specified by bannedname.
      tags: [bans]
      responses: 
        "200":
          description: User banned successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Ban" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" } 
    delete:
      operationId: unbanUser
      summary: Unban a user specified by banId.
      description: The user specified by username can delete a ban on the user specified by bannedname.
      tags: [bans]
      responses:
          "204": { description: Ban removed successfully. }
          "400": { $ref: "#/components/responses/BadRequest" }
          "404": { $ref: "#/components/responses/NotFoundError" }
          "500": { $ref: "#/components/responses/InternalServerError" }
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user 
      description: |-
            If the user does not exist, it will be created,
            and an identifier is returned.
            If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json: 
            schema: { $ref: "#/components/schemas/Username" }
        required: true
      responses:
        '201':
          description: User log-in action successful 
          content:
            application/json: 
              schema: { $ref: "#/components/schemas/ID" }
          links:
            GetUserByUserId:  
              operationId: setMyUserName
              parameters:
                userId: '$response.body#/identifier'
              description: >
                The `id` value returned in the response can be used as
                the `userId` parameter in `PUT /accounts/{userId}/edit`.

components:
  securitySchemes:
    bearerAuth:   
      type: http
      scheme: bearer
      bearerFormat: JWT 
  parameters:
    commentId:
      in: path
      name: commentId
      description: The comment identifier
      schema: { $ref: "#/components/schemas/CommentId" }
      required: true
    username: 
      in: path
      name: username 
      description: The name of a user
      schema: {$ref: '#/components/schemas/Username'}
      required: true
    userId: 
      in: path
      name: userId
      description: The identifier for a user
      schema: {$ref: '#/components/schemas/ID'}
      required: true
    followername: 
      in: path
      name: followername
      description: The name of a follower
      schema: {$ref: '#/components/schemas/Username'}
      required: true
    followingname: 
      in: path
      name: followingname
      description: The name of a following
      schema: {$ref: '#/components/schemas/Username'}
      required: true
    bannedname: 
      in: path
      name: bannedname
      description: The name of a banned user
      schema: {$ref: '#/components/schemas/Username'}
      required: true
    photoId:
      in: path
      name: photoId
      description: The identifier of a phot
      schema: {$ref: '#/components/schemas/PhotoId'}
      required: true
    page:
      name: page
      in: query
      description: Current page number
      required: false
      schema: 
        type: integer
        description: An integer signifying the page number
        format: int32
        default: 1
        minimum: 1
    limit:
      name: limit
      in: query
      description: Limits the number of returned items
      required: false
      schema: 
        type: integer
        description: An integer signifying the limit
        format: int32
        default: 10
        minimum: 10
        maximum: 100
        multipleOf: 10
  responses:
    BadRequest:
      description: Request was formulated badly
      content: 
        application/json:
          schema: 
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: There is an error in the server
      content: 
        application/json:
          schema: 
            $ref: '#/components/schemas/Error'
    NotFoundError:
      description: There is an error in the server
      content: 
        application/json:
          schema: 
            $ref: '#/components/schemas/Error'
  schemas:
    User:
      description: The information that characterizes a user
      type: object 
      properties: 
        username: { $ref: "#/components/schemas/Username" }
        userId: { $ref: "#/components/schemas/ID" }
      required: 
      - Username 
      - ID
    Image: 
      description: The binary file corrisponding to the image
      type: string 
      format: binary
      minLength: 1
      maxLength: 100000
    PhotoId:
      description: The identifier for a photo assigned by the server
      type: integer
      example: 1
      minimum: 0 
      maximum: 1000
    ID: 
      description: The identifier for a user assigned by the server upon registration
      type: integer
      example: 1
      minimum: 0 
      maximum: 1000
    CommentId: 
      description: The identifier for a comment assigned by the server upon registration
      type: integer
      example: 1
      minimum: 0 
      maximum: 1000
    Username: 
      description: The name chosen by the user for public identification by other users
      type: string 
      example: Maria 
      pattern: '^[a-zA-Z][a-zA-Z0-9_.]{4,24}$'
      minLength: 5
      maxLength: 25
    Error:
      type: object 
      description: The error statement
      properties:
        statement:
          description: The text from the server for exaplaing the error
          type: string
          example: Invalid username.
          pattern: '^[a-zA-Z0-9.]{5,30}$'
          minLength: 5
          maxLength: 50
    Photos: 
      type: array
      description: User's photos in reverse chronological order
      items: { $ref: "#/components/schemas/Photo" }
      minItems: 0
      maxItems: 1000
      uniqueItems: true
    Photo: 
      type: object
      description: The photo includes the id with which one can identify the photo and the image and the time posted as well as the likes and comments put.
      properties:
        ID: { $ref: "#/components/schemas/PhotoId" }
        Owner: { $ref: "#/components/schemas/Username" }
        Datetime: 
          description: The date of publishment of the photo
          type: string
          format: date-time
        NumLikes: 
          description: The number of likes of the photo
          type: integer
          format: int32
          example: 1
          minimum: 0 
          maximum: 1000
        NumComments: 
          description: The number of comments of the photo
          type: integer
          format: int32
          example: 1
          minimum: 0 
          maximum: 1000
      required: 
      - ID
      - Datetime
      - Owner
      - NumLikes
      - NumComments
    Follower:
      type: object
      description: A follower is reppresented by its username
      properties:
        Username: { $ref: "#/components/schemas/Username" }
      required: 
      - Username
    Followers:
      type: array
      description: The list of followers
      items: { $ref: "#/components/schemas/Follower" }
      minItems: 0
      maxItems: 1000
      uniqueItems: true
    Following:
      type: object
      description: The following user is reppresented by its username
      properties:
        username: { $ref: "#/components/schemas/Username" }
      required: 
      - Username
    Followings:
      type: array
      description: The list of users followed
      items: { $ref: "#/components/schemas/Following" }
      minItems: 0
      maxItems: 1000
      uniqueItems: true
    Ban:
      type: object
      description: A banned user is reppresented by its username
      properties:
        Username: { $ref: "#/components/schemas/Username" }
      required: 
      - Username
    Bans:
      description: The list users banned
      type: array
      items: { $ref: "#/components/schemas/Ban" }
      minItems: 0
      maxItems: 1000
      uniqueItems: true
    Comment: 
      type: object
      description: The comment is rappresented by an id, the username who put the comment as well as the comment itself
      properties: 
        ID:
          description: The identifier for a comment assigned by the server upon registration
          type: integer
          example: 1
          minimum: 0 
          maximum: 1000
          readOnly: true
        Text:
          type: string 
          description: The text of the comment chosen by user
          example: Beautiful!
          pattern: '^[a-zA-Z0-9_.+-]{1,200}$'
          minLength: 1
          maxLength: 200
        Commenter: { $ref: "#/components/schemas/Username" }
      required:
      - ID
      - Text
      - Commenter
    Comments:
      description: The list of comments 
      type: array 
      items: { $ref: "#/components/schemas/Comment" }
      minItems: 0
      maxItems: 1000
      uniqueItems: true
    Like: 
      type: object
      description: The user who put the like
      properties: 
        Liker: { $ref: "#/components/schemas/Username" }    
      required: 
      - Username
    Likes:
      type: array
      description: The list of users who liked
      items: { $ref: "#/components/schemas/Like" }
      minItems: 0
      maxItems: 1000
      uniqueItems: true
    Profile:  
      type: object
      properties:
        Username: { $ref: "#/components/schemas/Username" }
        Followers:
          description: Number of followers of profile
          type: integer 
          format: int32
          example: 1
          minimum: 0 
          maximum: 1000
        Followings:
          description: Number of followings by profile
          type: integer 
          format: int32
          example: 1
          minimum: 0 
          maximum: 1000
        Posts:
          description: Number of posts of user
          type: integer
          format: int32
          example: 1
          minimum: 0 
          maximum: 100
      required: 
      - Username
      - Followers
      - Followings
      - Posts
security:
  - bearerAuth: []   