openapi: 3.0.3
info:
  title: WASAPhoto
  version: 0.0.1
paths: 
  /accounts/{userId}/edit:
    parameters:
    - { $ref: "#/components/parameters/userId" }
    put:
      operationId: setMyUserName
      summary: Updates user account by providing a new username.
      description: Allows the user specified by userId to update its user account. The content returned if successful is a username.
      tags: [user settings]
      responses:
        '201':
          description: Username changed successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/userInfo" }  
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        
  /users/{username}/profile:
    parameters:
    - $ref: '#/components/parameters/username'
    get: 
      operationId: getUserProfile
      summary: Gets profile of user. 
      description: Allows a user to get the profile of the user specified by username.
      tags: [profile]
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/profile" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" } 
 
  /users/{username}/photos/:
    parameters:
    - $ref: '#/components/parameters/username'
    - $ref: '#/components/parameters/page'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/sort'
    get: 
      operationId: getPhotos
      summary: Get the photos uploaded by the user. 
      description: Allows the user to get photos of the user specified by username.
      tags: [photos]
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/photos" } 
          headers:
            Pagination-Count: 
              description: Total number of items
              schema:
                type: integer
            Pagination-Page: 
              description: Current page number
              schema:
                type: integer
            Pagination-Limit: 
              description: Number of returned items
              schema:
                type: integer
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    post: 
      operationId: uploadPhoto
      summary: Post a photo of the user and so add it to their stream of photos.
      description: Allows a user specified by username to add a photo to their photos collection. 
      tags: [photos]
      requestBody: 
        content:
          image/png:
            schema: { $ref: "#/components/schemas/image" }
        required: true
      responses:
        '201':
          description: Photo uploaded successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/photo" } 
          links:
            GetImageByPhotoId:  
              operationId: getRawImage
              parameters:
                imageId: '$response.body#/photoId'
              description: >
                The `photoId` value returned in the response can be used as
                the `photoId` parameter in `GET /images/{photoId}`.
            GetPhotoByPhotoId:  
              operationId: getPhoto
              parameters:
                photoId: '$response.body#/photoId'
              description: >
                The `photoId` value returned in the response can be used as
                the `photoId` parameter in `GET /users/{username}/photos/{photoId}`.
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /images/{photoId}:
    parameters:
    - $ref: '#/components/parameters/photoId'
    get:
      operationId: getRawImage
      summary: Get the raw image.
      description: Allows a user to get the image contained in a photo resource.
      tags: [photos]
      responses: 
        '200':
          description: Successful operation.
          content:
            image/png: 
              schema: { $ref: "#/components/schemas/image" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /users/{username}/stream:
    parameters:
      - $ref: '#/components/parameters/username'
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/sort'
    get: 
      operationId: getMyStream
      summary: Get the photos of the followed users.
      description: Allows a user specified by username to get their stream which is a collection of photos of different users. 
      tags: [steam]
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/stream" }
          headers:
            Pagination-Count: 
              description: Total number of items
              schema:
                type: integer
            Pagination-Page: 
              description: Current page number
              schema:
                type: integer
            Pagination-Limit: 
              description: Number of returned items
              schema:
                type: integer
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
            
  /users/{username}/photos/{photoId}:
    parameters:
    - $ref: '#/components/parameters/username'
    - $ref: '#/components/parameters/photoId'
    get: 
      operationId: getPhoto
      summary: Get the photo uploaded by the user. 
      description: Allows the user to get the photo of the user specified by username.
      tags: [photos]
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/photo" } 
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete: 
      operationId: deletePhoto
      summary: Delete a photo of the user and so remove it from their stream of photos.
      description: Allows the user to delete the photo specified by photoID of the user specified by username.
      responses:
        '204':
          description: Photo deleted successfully.
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        
  /users/{username}/photos/{photoId}/comments/:
    parameters:
    - $ref: '#/components/parameters/username'
    - $ref: '#/components/parameters/photoId'
    - $ref: '#/components/parameters/page'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/sort'
    get: 
      operationId: getCommentPhoto
      summary: Get comments of a photo of a user specified by username.
      description: A user can get the comments of a photo specified by photoId from the photos of the user specified by username. 
      tags: [comments]
      parameters: 
      - in: query
        name: commentId
        schema: 
          type: string
          minLength: 78
        required: false
      responses: 
        "200":
          description: Successfull operation.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/comments" }
          headers:
            Pagination-Count: 
              description: Total number of items
              schema:
                type: integer
            Pagination-Page: 
              description: Current page number
              schema:
                type: integer
            Pagination-Limit: 
              description: Number of returned items
              schema:
                type: integer
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }  
    post: 
      operationId: commentPhoto
      summary: Post a comment on a photo of a user specified by username.
      description: A user can post a comment on a photo specified by PhotoId. 
      tags: [comments]
      parameters:
      - in: query
        name: commenterName
        schema:
          type: string 
        required: true 
      requestBody: 
        content:
          application/json:
            schema: { $ref: "#/components/schemas/comment" }
        required: true
      responses: 
        "201":
          description: Comment created successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/comment" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        
  /users/{username}/photos/{photoId}/comments/{commentId}:
    parameters:
    - $ref: '#/components/parameters/username'
    - $ref: '#/components/parameters/photoId'
    - $ref: '#/components/parameters/commentId'
    delete:
      operationId: uncommentPhoto
      summary: Remove a comment.
      description: The user can delete a comment specified by commentId.
      tags: [comments]
      responses:
        "204": { description: Comment deleted successfully. }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /users/{username}/photos/{photoId}/likes/:
    parameters:
    - $ref: '#/components/parameters/username'
    - $ref: '#/components/parameters/photoId'
    - $ref: '#/components/parameters/page'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/sort'
    get: 
      operationId: getLikes
      summary: Get likes of a photo specified by photoId of a user specified by username.
      description: A user can get the likes on a photo specified by photoId of a user username.
      tags: [likes]
      responses: 
        "200":
          description: Successful operation.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/likes" }
          headers:
            Pagination-Count: 
              description: Total number of items
              schema:
                type: integer
            Pagination-Page: 
              description: Current page number
              schema:
                type: integer
            Pagination-Limit: 
              description: Number of returned items
              schema:
                type: integer
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" } 
        
  /users/{username}/photos/{photoId}/likes/{userId}:
    parameters:
    - $ref: '#/components/parameters/username'
    - $ref: '#/components/parameters/photoId'
    - $ref: '#/components/parameters/userId'
    put: 
      operationId: likePhoto
      summary: Put a like on a photo of a user specified by username. The id of the like is the id of the user who puts the like.
      description: The user specified by userId can put likes on a photo specified by photoId.
      tags: [likes]
      responses: 
        "201":
          description: Like put successfully 
          content:
            application/json:
              schema: { $ref: "#/components/schemas/like" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      operationId: unlikePhoto
      summary: Remove a like.
      responses:
        "204": { description: Like removed successfully. }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /users/{username}/followers/{followername}:
    parameters:
    - $ref: '#/components/parameters/username'
    - $ref: '#/components/parameters/followername'
    delete:
      operationId: removeFollower
      summary: The user specified by username will remove a follower specified by followername.
      description: The user specified by username can remove a follower specified by followername. 
      tags: [follower]
      responses:
        "204": { description: Follower removed successfully. }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /users/{username}/followers/:
    parameters:
    - $ref: '#/components/parameters/username'
    - $ref: '#/components/parameters/page'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/sort'
    get: 
      operationId: getFollowers
      summary: Get followers of a user specified by username.
      description: A user can get the followers of the user specified by username. 
      tags: [followers]
      parameters: 
      - in: query
        name: followername
        schema: {$ref: '#/components/schemas/username'}
        required: false
      responses: 
        "200":
          description: Successful operation.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/followers_list" }
          headers:
            Pagination-Count: 
              description: Total number of items
              schema:
                type: integer
            Pagination-Page: 
              description: Current page number
              schema:
                type: integer
            Pagination-Limit: 
              description: Number of returned items
              schema:
                type: integer
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }  

  /users/{username}/followings/:
    parameters:
    - $ref: '#/components/parameters/username'
    - $ref: '#/components/parameters/page'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/sort'
    get: 
      operationId: getFollowings
      summary: Get followings of a user specified by username.
      description: A user can get the users they are followed by the user specified by username. 
      tags: [followings]
      parameters: 
      - in: query
        name: followingname
        schema: {$ref: '#/components/schemas/username'}
        required: false
      responses: 
        "200":
          description: Successful operation.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/followings_list" }
          headers:
            Pagination-Count: 
              description: Total number of items
              schema:
                type: integer
            Pagination-Page: 
              description: Current page number
              schema:
                type: integer
            Pagination-Limit: 
              description: Number of returned items
              schema:
                type: integer
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }  

  /users/{username}/followings/{followingname}:
    parameters:
    - $ref: '#/components/parameters/username'
    - $ref: '#/components/parameters/followingname'
    put:
      operationId: followUser
      summary: Folllow a user.
      description: The user specified by username can follow a user specified by following name.
      tags: [followings]
      responses: 
        "201":
          description: User followed successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/following" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { description: User not found. }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      operationId: unfollowUser
      summary: Unfollow a user.
      description: The user specified by username can unfollow a user specified by following name.
      responses:
        "204": { description: User unfollowed successfully. }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /users/{username}/bans/:
    parameters:
    - $ref: '#/components/parameters/username'
    - $ref: '#/components/parameters/page'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/sort'
    get:
      operationId: getBans
      summary: Get all users banned by the user username.
      description: The user specified by username can get all the bans they have put. 
      tags: [bans]
      parameters: 
      - in: query
        name: bannedname
        schema: { $ref: "#/components/schemas/username" }
        required: false
      responses: 
        "200":
          description: Successful operation.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/banned_list" }
          headers:
            Pagination-Count: 
              description: Total number of items
              schema:
                type: integer
            Pagination-Page: 
              description: Current page number
              schema:
                type: integer
            Pagination-Limit: 
              description: Number of returned items
              schema:
                type: integer
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" } 

  /users/{username}/bans/{bannedname}:
    parameters:
    - $ref: '#/components/parameters/username'
    - $ref: '#/components/parameters/bannedname'
    put:
      operationId: banUser
      summary: Ban a user specified by banId.
      description: The user specified by username can put a ban on the user specified by bannedname.
      tags: [bans]
      responses: 
        "200":
          description: User banned successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/banned" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" } 
    delete:
      operationId: unbanUser
      summary: Unban a user specified by banId.
      description: The user specified by username can delete a ban on the user specified by bannedname.
      tags: [bans]
      responses:
          "204": { description: Ban removed successfully. }
          "400": { $ref: "#/components/responses/BadRequest" }
          "404": { $ref: "#/components/responses/NotFoundError" }
          "500": { $ref: "#/components/responses/InternalServerError" }
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user 
      description: |-
            If the user does not exist, it will be created,
            and an identifier is returned.
            If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json: 
            schema: { $ref: "#/components/schemas/username" }
        required: true
      responses:
        '201':
          description: User log-in action successful 
          content:
            application/json: 
              schema: { $ref: "#/components/schemas/userId" }
          links:
            GetUserByUserId:  
              operationId: setMyUserName
              parameters:
                userId: '$response.body#/identifier'
              description: >
                The `id` value returned in the response can be used as
                the `userId` parameter in `PUT /accounts/{userId}/edit`.

components:
  securitySchemes:
    bearerAuth:   
      type: http
      scheme: bearer
      bearerFormat: JWT 
  parameters:
    commentId:
      in: path
      name: commentId
      schema: { $ref: "#/components/schemas/commentId" }
      required: true
    username: 
      in: path
      name: username 
      schema: {$ref: '#/components/schemas/username'}
      required: true
    userId: 
      in: path
      name: userId
      schema: {$ref: '#/components/schemas/userId'}
      required: true
    followername: 
      in: path
      name: followername
      schema: {$ref: '#/components/schemas/username'}
      required: true
    followingname: 
      in: path
      name: followingname
      schema: {$ref: '#/components/schemas/username'}
      required: true
    bannedname: 
      in: path
      name: bannedname
      schema: {$ref: '#/components/schemas/username'}
      required: true
    photoId:
      in: path
      name: photoId
      schema: {$ref: '#/components/schemas/photoId'}
      required: true
    page:
      name: page
      in: query
      description: Current page number
      required: false
      schema: 
        type: integer
        format: int32
        default: 1
        minimum: 1
    limit:
      name: limit
      in: query
      description: Limits the number of returned items
      required: false
      schema: 
        type: integer
        format: int32
        default: 10
        minimum: 10
        maximum: 100
        multipleOf: 10
    sort:
      name: sort
      in: query
      description: Sorting order of items
      required: false
      schema:
        type: string
        default: 'reverse chronological'
  responses:
    BadRequest:
      description: Request was formulated badly. 
      content: 
        application/json:
          schema: 
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: There is an error in the server.
      content: 
        application/json:
          schema: 
            $ref: '#/components/schemas/Error'
    NotFoundError:
      description: There is an error in the server.
      content: 
        application/json:
          schema: 
            $ref: '#/components/schemas/Error'
  schemas:
    userInfo:
      description: The information that characterizes a user. 
      type: object 
      properties: 
        username: { $ref: "#/components/schemas/username" }
        userId: { $ref: "#/components/schemas/userId" }
      required: 
      - username 
      - userId
    image: 
      description: The binary file corrisponding to the image.
      type: string 
      format: binary
    photoId:
      description: The identifier for a photo assigned by the server.
      type: object
      properties:
        identifier:
          type: string 
          example: "abcdef012345"
          pattern: '^[a-zA-Z0-9_.+-]{10,200}$'
          minLength: 10 
          maxLength: 200
      required: 
      - identifier
    userId: 
      description: The identifier for a user assigned by the server upon registration. 
      type: object 
      properties:
        identifier:
          type: string
          example: "abcdef012345"
          pattern: '^[a-zA-Z0-9_.+-]{10,200}$'
          minLength: 10 
          maxLength: 200
    commentId: 
      description: The identifier for a comment assigned by the server upon registration. 
      type: object 
      properties: 
        identifier: 
          type: string
          example: "abcdef012345"
          pattern: '^[a-zA-Z0-9_.+-]{10,200}$'
          minLength: 10 
          maxLength: 200
    username: 
      description: The name chosen by the user for public identification by other users.
      type: object 
      properties:
        name:
          type: string 
          example: Maria 
          pattern: '^[a-zA-Z][a-zA-Z0-9_.]{10,25}$' 
          minLength: 3 
          maxLength: 16
    Error:
      type: object 
      description: The error statement. 
      properties:
        statement:
          type: string
          example: Error traced back to invalid username.
          pattern: '^[a-zA-Z0-9.]{5,30}$'
          minLength: 5
          maxLength: 30
    stream: 
      type: object
      description: Photos in reverse chronological order by several users.
      properties: 
        list: 
          type: array 
          items: { $ref: "#/components/schemas/photo" }
          minItems: 0
          maxItems: 1000
          uniqueItems: true
    photos: 
      type: object
      description: User's photos in reverse chronological order.
      properties: 
        list: 
          type: array 
          items: { $ref: "#/components/schemas/photo" }
          minItems: 0
          maxItems: 100
          uniqueItems: true
    photo: 
      type: object
      description: The photo includes the id with which one can identify the photo and the image and the time posted as well as the likes and comments put.
      properties:
        photoId: { $ref: "#/components/schemas/photoId" }
        dateTime: 
          type: string
          format: date-time
        likes: { $ref: "#/components/schemas/likes" }
        comments: { $ref: "#/components/schemas/comments" }
      required: 
      - photoId
      - dateTime
      - likes
      - comments
    follower:
      type: object
      description: A follower is reppresented by its username
      properties:
        followerUserName: { $ref: "#/components/schemas/username" }
      required: 
      - followerUserName
    followers_list:
      type: array
      description: The list of followers
      items: { $ref: "#/components/schemas/follower" }
      minItems: 0
      maxItems: 1000
      uniqueItems: true
    following:
      type: object
      description: The following user is reppresented by its username.
      properties:
        followingUserName: { $ref: "#/components/schemas/username" }
      required: 
      - followingUserName
    followings_list:
      type: array
      description: The list of users followed
      items: { $ref: "#/components/schemas/following" }
      minItems: 0
      maxItems: 1000
      uniqueItems: true
    banned:
      type: object
      description: A banned user is reppresented by its username.
      properties:
        bannedUserName: { $ref: "#/components/schemas/username" }
      required: 
      - bannedUserName
    banned_list:
      description: The list users banned
      type: array
      items: { $ref: "#/components/schemas/banned" }
      minItems: 0
      maxItems: 40
      uniqueItems: true
    comment: 
      type: object
      description: The comment is rappresented by the username who put the comment and the userId as well as the comment itself.
      properties: 
        commentId:
          type: object
          properties:
            identifier: { $ref: "#/components/schemas/commentId" }
          readOnly: true
        commentText:
          type: string 
          example: Beautiful!
          pattern: '^[a-zA-Z0-9_.+-]{1,2200}$'
          minLength: 1
          maxLength: 2200
        commenterUserName: 
          type: object
          properties:
            identifier: { $ref: "#/components/schemas/username" }
          readOnly: true
      required:
      - commentId
      - commentText
      - commenterUserName
    comments:
      type: object
      description: The numeber and the list of comments put.
      properties:
        number: 
          type: integer
          format: int32
          minimum: 0 
          maximum: 10000000
          default: 0
        list:
          type: array 
          items: { $ref: "#/components/schemas/comment" }
          minItems: 0
          maxItems: 10000000
          uniqueItems: true
      required: 
      - number 
      - list
    like: 
      type: object
      description: The user who put the like
      properties: 
        id: { $ref: "#/components/schemas/userId" }
      required: 
      - id
    likes:
      type: object
      description: The likes number and the list of users who liked
      properties:
        number: 
          type: integer
          format: int32
          minimum: 0 
          maximum: 10000000
        list:
          type: array 
          items: { $ref: "#/components/schemas/like" }
          maxItems: 10000000
          minItems: 0
          uniqueItems: true
      required: 
      - number
      - list
    profile:  
      type: object
      properties:
        username: { $ref: "#/components/schemas/username" }
        followers:
          description: Number of followers of profile
          type: integer 
          format: int32
          minimum: 0 
          maximum: 1000
        followings:
          description: Number of followings by profile
          type: integer 
          format: int32
          minimum: 0 
          maximum: 1000
        posts:
          description: Number of posts in stream
          type: integer
          format: int32
          minimum: 0 
          maximum: 100
        photos: { $ref: "#/components/schemas/photos" }
      required: 
      - username
      - followers
      - followings
      - posts
      - photos
security:
  - bearerAuth: []      
